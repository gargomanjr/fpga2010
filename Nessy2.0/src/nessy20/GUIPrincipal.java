/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUIPrincipal.java
 *
 * Created on 01-mar-2010, 22:50:42
 */
package nessy20;

import compiladorEntidad.Errores;
import compiladorEntidad.SintacticoEntidad;

import IOFPGA.Ejecucion;
import IOFPGA.RecepcionFPGA;
import app.*;
import compiladorEntidad.Entidad;
import generadorVHDL.GeneraVhdl;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Tony
 */
public class GUIPrincipal extends javax.swing.JFrame {
    //private EstadoContador estado_cont;

    private Parameters param;
    private Com com1;
    private RecepcionFPGA hiloreceptor;
    private Ejecucion ejec;
    private String ruta;
    private String fichero;
    private Entidad entidad;

    private static Logger   logger = Logger.getLogger ("GUIPrincipal.class");

    public Entidad getEntidad() {
        return entidad;
    }

    /** Creates new form GUIPrincipal */
    public GUIPrincipal() {

        try {

            param = new Parameters();
            param.setPort("COM1");
            param.setBaudRate("9600");
            com1 = new Com(param);
            /*this.hiloreceptor = new RecepcionFPGA(this, param, com1);
            this.ejec = new Ejecucion(this, this.com1);*/
            /* ruta = System.getenv("XilinxNessy");
            if (ruta == null){
            Process p = Runtime.getRuntime().exec("SET mivariable C:");
            //    Process p = Runtime.getRuntime().exec("export mivariable = d:");
            // System.setProperty("XilinxNessy", "dnhsjdhs");
            System.out.print("nkdsnbdjsd");
            }*/
            logger.info("Ejecutando Nessy 2.0...");
            initComponents();
            this._btnReanudar.setEnabled(false);
            this._PararEjecucion.setEnabled(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "La aplicación ya se encuentra ejecutándose, ciérrela para ejecutar nuevamente la aplicación.", "Info", JOptionPane.INFORMATION_MESSAGE);
            logger.info("La aplicacion ya se encuentra ejecutandose");
            System.exit(0);
        }
    }

    private void muestraErroresConsola(Errores errores) {
        for (int i = 0; i < errores.getErrores().size(); i++) {
            System.out.println(errores.getErrores().get(i));
        }
    }

    public void EscribirDatoPantalla(char c) {
        this._TextSalida.setText(this._TextSalida.getText() + c + " ");
    }

    public void EscribirDatoPantalla(String c) {
        this._TextSalida.setText(this._TextSalida.getText() + c + "\n");
    }

    void escribirEnPantalla(String str) {
        this._TextCargarbit.append(str + "\n");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        _CargarVhd = new javax.swing.JButton();
        _CrearBit = new javax.swing.JButton();
        _btnCargarBit = new javax.swing.JButton();
        _btnCargarTB = new javax.swing.JButton();
        _btnEjecutar = new javax.swing.JButton();
        _PararEjecucion = new javax.swing.JButton();
        _btnReanudar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        _TxtEntityVHD = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        _TextCargarbit = new javax.swing.JTextArea();
        _txtTB = new java.awt.TextArea();
        _TextSalida = new java.awt.TextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        _lblnInst = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nessy 2.0");
        setIconImage(new ImageIcon("src/recursos/Nessy.png").getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jToolBar1.setBorder(null);
        jToolBar1.setRollover(true);

        _CargarVhd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/btnCargarVhdl.png"))); // NOI18N
        _CargarVhd.setText("Cargar VHD");
        _CargarVhd.setFocusable(false);
        _CargarVhd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _CargarVhd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _CargarVhd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _CargarVhdActionPerformed(evt);
            }
        });
        jToolBar1.add(_CargarVhd);

        _CrearBit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/btnConectar.png"))); // NOI18N
        _CrearBit.setText("Crear .Bit");
        _CrearBit.setFocusable(false);
        _CrearBit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _CrearBit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _CrearBit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _CrearBitActionPerformed(evt);
            }
        });
        jToolBar1.add(_CrearBit);

        _btnCargarBit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/btnTrafico.png"))); // NOI18N
        _btnCargarBit.setText("Cargar .Bit");
        _btnCargarBit.setFocusable(false);
        _btnCargarBit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _btnCargarBit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _btnCargarBit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _btnCargarBitActionPerformed(evt);
            }
        });
        jToolBar1.add(_btnCargarBit);

        _btnCargarTB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/test.png"))); // NOI18N
        _btnCargarTB.setText("Cargar TB");
        _btnCargarTB.setFocusable(false);
        _btnCargarTB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _btnCargarTB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _btnCargarTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _btnCargarTBActionPerformed(evt);
            }
        });
        jToolBar1.add(_btnCargarTB);

        _btnEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/run.png"))); // NOI18N
        _btnEjecutar.setText("Ejecutar");
        _btnEjecutar.setFocusable(false);
        _btnEjecutar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _btnEjecutar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _btnEjecutarActionPerformed(evt);
            }
        });
        jToolBar1.add(_btnEjecutar);

        _PararEjecucion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/stop2.png"))); // NOI18N
        _PararEjecucion.setText("Parar Ejecución");
        _PararEjecucion.setFocusable(false);
        _PararEjecucion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _PararEjecucion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _PararEjecucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _PararEjecucionActionPerformed(evt);
            }
        });
        jToolBar1.add(_PararEjecucion);

        _btnReanudar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/test2.png"))); // NOI18N
        _btnReanudar.setText("Reanudar Ejecución");
        _btnReanudar.setFocusable(false);
        _btnReanudar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _btnReanudar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        _btnReanudar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _btnReanudarActionPerformed(evt);
            }
        });
        jToolBar1.add(_btnReanudar);

        _TxtEntityVHD.setColumns(20);
        _TxtEntityVHD.setEditable(false);
        _TxtEntityVHD.setRows(5);
        jScrollPane1.setViewportView(_TxtEntityVHD);

        jTabbedPane1.addTab("Entity VHD", jScrollPane1);

        _TextCargarbit.setColumns(20);
        _TextCargarbit.setRows(5);
        _TextCargarbit.setMaximumSize(getMaximumSize());
        jScrollPane2.setViewportView(_TextCargarbit);

        jTabbedPane1.addTab("Cargar", jScrollPane2);
        jTabbedPane1.addTab("TestBench", _txtTB);
        jTabbedPane1.addTab("Salida", _TextSalida);

        jLabel1.setText("Número de Instrucción");

        _lblnInst.setEditable(false);

        jMenu1.setText("Opciones");

        jMenuItem1.setText("Cargar VHD");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Crear .Bit");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Cargar .Bit");
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Cargar TB");
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Ejecutar");
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Parar Ejecucion");
        jMenuItem6.setEnabled(false);
        jMenu1.add(jMenuItem6);

        jMenuItem7.setText("Reanudar Ejecucion");
        jMenuItem7.setEnabled(false);
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Vistas");

        jMenuItem8.setText("Entity VHD");
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Cargar");
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("TestBench");
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Salida");
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(449, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(_lblnInst, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(_lblnInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Entity VHD");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _CargarVhdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__CargarVhdActionPerformed

        boolean error = false;
        JFileChooser chooser;
        this._TxtEntityVHD.setText("");
        chooser = new JFileChooser();
        Filtro filter = new Filtro("vhd");
        chooser.addChoosableFileFilter(filter);
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Seleccionar Archivo VHDL");
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                fichero = chooser.getSelectedFile().getAbsolutePath();

                FileReader fr = new FileReader(fichero);
                BufferedReader br = new BufferedReader(fr);
                String linea = br.readLine();
                while (linea != null) {
                    this._TxtEntityVHD.append(linea + "\n");
                    linea = br.readLine();
                }
                br.close();
            } catch (IOException ex) {
                error = true;
                Logger.getLogger(GUIPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                this._TxtEntityVHD.append("Error al cargar la entity");
            }
            if (!error) {
                JOptionPane.showMessageDialog(this, "Entity cargada correctamente", "Info", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error al cargar el fichero de la entity", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event__CargarVhdActionPerformed

    private void _CrearBitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__CrearBitActionPerformed

        SintacticoEntidad compilador = null;
        Errores errores = new Errores();
        GeneraVhdl generador;

        try {
            StringReader rd = new StringReader(this._TxtEntityVHD.getText());
            BufferedReader brd = new BufferedReader(rd);

            compilador = new SintacticoEntidad(brd, errores);
            compilador.inicia();

            boolean error = compilador.Entidad();
            if (!error) {
                compilador.getEntidad().muestra();
                this.entidad = compilador.getEntidad();
                generador = new GeneraVhdl("IOSerie//Circuito_FPGA.vhd", compilador.getEntidad(), errores);
                if (generador.abrir()) {
                    generador.crearFichero();
                    generador.cerrar();
                    System.out.println("Fichero vhdl creado correctamente");
                    //compilación y creación del .bit
                    Process p = Runtime.getRuntime().exec("cmd.exe /C start comandosXilinx\\compilar.bat " + fichero);

                } else {
                    this.muestraErroresConsola(errores);
                }
            } else {
                this.muestraErroresConsola(errores);
            }
        } catch (Exception e) {
            if (e.getMessage() != null) {
                System.out.println(e.getMessage());
            } else {
                e.printStackTrace();
            }

        }
        if (compilador != null) {
            compilador.cerrar();
        }


    }//GEN-LAST:event__CrearBitActionPerformed

    private void _btnCargarBitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__btnCargarBitActionPerformed
        String fichero_bit;
        boolean error;
        JFileChooser chooser;
        chooser = new JFileChooser();
        Filtro filter = new Filtro("bit");
        chooser.addChoosableFileFilter(filter);
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Cargar BitStream");
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                fichero_bit = chooser.getSelectedFile().getAbsolutePath();
                CargaBit cargaBit = new CargaBit(this, fichero_bit);
                error = !cargaBit.cargar();
                if (!error) {
                    JOptionPane.showMessageDialog(this, "Bitstream cargado correctamente", "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Error al cargar el fichero", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception ex) {
                Logger.getLogger(GUIPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("Selecc ");
            this._TextCargarbit.setText("No ha seleccionado el .bit, puede que si no lo ha cargado con anterioridad la aplicación no funcione.");
        }
        this.jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event__btnCargarBitActionPerformed

    private void _btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__btnEjecutarActionPerformed

        this.ejec = new Ejecucion(this, this.com1);
        String ls_cadenaaejecutar = this._txtTB.getText();
        //this.ejec = new Ejecucion(ls_cadenaaejecutar, this, this.com1);
        this.ejec.setCadena(ls_cadenaaejecutar);
        
        if (this.entidad != null) {//si la entidad está definida
            //this.ejec.TraduceString();
            if (ejec.convierteCadenas()) {
                this.hiloreceptor = new RecepcionFPGA(this, param, com1);
                hiloreceptor.start();
                ejec.start();

                this.jTabbedPane1.setSelectedIndex(3);
                this._btnReanudar.setEnabled(false);
                this._PararEjecucion.setEnabled(true);
            } else {
                //JOptionPane.showMessageDialog(this, "Error en el formato del banco de pruebas, revíselo por favor.\n"+"Sugerencia: se deben pasar cadenas de bits 0's y 1's de longitud igual a "+ Integer.toString(4)+" .", "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Error en el formato del banco de pruebas, revíselo por favor.\n" + "Sugerencia: se deben pasar cadenas de bits 0's y 1's de longitud igual a " + Integer.toString(this.getEntidad().getBitsEntrada()) + " .", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "La entidad no está definida", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event__btnEjecutarActionPerformed

    private void _PararEjecucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__PararEjecucionActionPerformed
        synchronized (this) {
            try {
                //TODO : Función que mandara el enable..

                this.hiloreceptor.wait();
                this.ejec.wait();

                this._btnReanudar.setEnabled(true);
                this._PararEjecucion.setEnabled(false);
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(this, "Error al parar hilo, compruebe que realmente esta ejecutando o que ya ha detenido la ejecución.", "Info", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }//GEN-LAST:event__PararEjecucionActionPerformed

    private void _btnReanudarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__btnReanudarActionPerformed
        hiloreceptor.notify();
        ejec.notify();
        this._btnReanudar.setEnabled(false);
        this._PararEjecucion.setEnabled(true);
        //TODO : Función que volviera activar la fpga.
    }//GEN-LAST:event__btnReanudarActionPerformed

    private void _btnCargarTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__btnCargarTBActionPerformed

        boolean error = false;
        JFileChooser chooser;

        String fichero_tb;

        this._TxtEntityVHD.setText("");
        chooser =
                new JFileChooser();
        Filtro filter = new Filtro("txt");
        chooser.addChoosableFileFilter(filter);
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Seleccionar TestBench");
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                fichero_tb = chooser.getSelectedFile().getAbsolutePath();

                FileReader fr = new FileReader(fichero_tb);
                BufferedReader br = new BufferedReader(fr);
                String linea = br.readLine();
                while (linea != null) {
                    this._txtTB.append(linea + "\n");
                    linea = br.readLine();
                }

                br.close();
            } catch (IOException ex) {
                error = true;
                Logger.getLogger(GUIPrincipal.class.getName()).log(Level.SEVERE, null, ex);


                this._txtTB.append(
                        "Error al cargar el banco de pruebas");
            }
            if (!error) {
                JOptionPane.showMessageDialog(this, "TestBench cargado correctamente", "Info", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error al cargar el fichero de test", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            System.out.println("No Selection ");
        }

        this.jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event__btnCargarTBActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        ejec.pararrecepcionfpga();
        this.hiloreceptor.pararrecepcionfpga();
    }//GEN-LAST:event_formWindowClosed
    public void setNumeroInst(int inst) {
        this._lblnInst.setText(Integer.toString(inst));
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _CargarVhd;
    private javax.swing.JButton _CrearBit;
    private javax.swing.JButton _PararEjecucion;
    private javax.swing.JTextArea _TextCargarbit;
    private java.awt.TextArea _TextSalida;
    private javax.swing.JTextArea _TxtEntityVHD;
    private javax.swing.JButton _btnCargarBit;
    private javax.swing.JButton _btnCargarTB;
    private javax.swing.JButton _btnEjecutar;
    private javax.swing.JButton _btnReanudar;
    private javax.swing.JTextField _lblnInst;
    private java.awt.TextArea _txtTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
